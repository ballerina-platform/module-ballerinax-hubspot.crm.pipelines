// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

# Pipelines represent distinct stages in a workflow, like closing a deal or servicing a support ticket. These endpoints provide access to read and modify pipelines in HubSpot. Pipelines support `deals` and `tickets` object types.
# 
# ## Pipeline ID validation
# 
# When calling endpoints that take pipelineId as a parameter, that ID must correspond to an existing, un-archived pipeline. Otherwise the request will fail with a `404 Not Found` response.
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig? apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.hubapi.com/crm/v3/pipelines") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        if config.auth is ApiKeysConfig {
            self.apiKeyConfig = (<ApiKeysConfig>config.auth).cloneReadOnly();
        } else {
            httpClientConfig.auth = <http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig>config.auth;
            self.apiKeyConfig = ();
        }
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Return an audit of all changes to the pipeline stage
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [string objectType]/[string pipelineId]/stages/[string stageId]/audit(map<string|string[]> headers = {}) returns CollectionResponsePublicAuditInfoNoPaging|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages/${getEncodedUri(stageId)}/audit`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Return a pipeline by ID
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [string objectType]/[string pipelineId](map<string|string[]> headers = {}) returns Pipeline|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Replace a pipeline
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function put [string objectType]/[string pipelineId](PipelineInput payload, map<string|string[]> headers = {}, *PutCrmV3PipelinesObjectTypePipelineIdReplaceQueries queries) returns Pipeline|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Delete a pipeline
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - No content 
    resource isolated function delete [string objectType]/[string pipelineId](map<string|string[]> headers = {}, *DeleteCrmV3PipelinesObjectTypePipelineIdArchiveQueries queries) returns error? {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Update a pipeline
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - successful operation 
    resource isolated function patch [string objectType]/[string pipelineId](PipelinePatchInput payload, map<string|string[]> headers = {}, *PatchCrmV3PipelinesObjectTypePipelineIdUpdateQueries queries) returns Pipeline|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Return an audit of all changes to the pipeline
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [string objectType]/[string pipelineId]/audit(map<string|string[]> headers = {}) returns CollectionResponsePublicAuditInfoNoPaging|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/audit`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Return all stages of a pipeline
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [string objectType]/[string pipelineId]/stages(map<string|string[]> headers = {}) returns CollectionResponsePipelineStageNoPaging|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Create a pipeline stage
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function post [string objectType]/[string pipelineId]/stages(PipelineStageInput payload, map<string|string[]> headers = {}) returns PipelineStage|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Retrieve all pipelines
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [string objectType](map<string|string[]> headers = {}) returns CollectionResponsePipelineNoPaging|error {
        string resourcePath = string `/${getEncodedUri(objectType)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Create a pipeline
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function post [string objectType](PipelineInput payload, map<string|string[]> headers = {}) returns Pipeline|error {
        string resourcePath = string `/${getEncodedUri(objectType)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Return a pipeline stage by ID
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function get [string objectType]/[string pipelineId]/stages/[string stageId](map<string|string[]> headers = {}) returns PipelineStage|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages/${getEncodedUri(stageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Replace a pipeline stage
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function put [string objectType]/[string pipelineId]/stages/[string stageId](PipelineStageInput payload, map<string|string[]> headers = {}) returns PipelineStage|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages/${getEncodedUri(stageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Delete a pipeline stage
    #
    # + headers - Headers to be sent with the request 
    # + return - No content 
    resource isolated function delete [string objectType]/[string pipelineId]/stages/[string stageId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages/${getEncodedUri(stageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Update a pipeline stage
    #
    # + headers - Headers to be sent with the request 
    # + return - successful operation 
    resource isolated function patch [string objectType]/[string pipelineId]/stages/[string stageId](PipelineStagePatchInput payload, map<string|string[]> headers = {}) returns PipelineStage|error {
        string resourcePath = string `/${getEncodedUri(objectType)}/${getEncodedUri(pipelineId)}/stages/${getEncodedUri(stageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["private-app"] = self.apiKeyConfig?.privateApp;
            headerValues["private-app-legacy"] = self.apiKeyConfig?.privateAppLegacy;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }
}
